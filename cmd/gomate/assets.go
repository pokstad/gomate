// Code generated by go-bindata.
// sources:
// assets/remarkdown.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsRemarkdownCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x72\xdb\x36\x10\xbe\xeb\x29\xb6\xea\x74\xc6\x76\x0c\x49\x96\xed\x1c\x98\x89\x4f\xbd\xe4\x90\x4b\xa7\xb7\x24\xd3\x40\xe4\x52\xc0\x08\x04\x58\x10\xb4\xea\xb4\xc9\xb3\x77\x48\x90\xe1\xdf\x92\x92\xec\xd4\xe9\x21\x32\x67\x4c\x02\x8b\xc5\xb7\x3f\x58\xec\xee\xf2\xe2\x27\xf8\x0d\xdf\x72\xbb\x8b\xcc\x5e\xc3\xf5\x62\xb5\x58\xc1\xd9\xdb\x37\xbf\x9f\x83\x70\x2e\xcd\x82\xe5\x32\xbe\xcf\x42\xb1\xd8\x4a\x27\xf2\xcd\x42\x9a\xa5\xc5\xa4\x22\x5f\xc2\xc5\x72\xb6\xbc\x98\x01\xbc\xd1\xa1\xca\x23\x8c\x02\xe0\x4a\x41\xe6\x1e\x14\x66\x33\x80\x5f\x31\xe6\xb9\x72\x59\x00\x42\x33\x8b\x19\xba\xe2\x45\xf0\x4c\x40\xae\x98\x78\x48\x05\x6a\x30\x8a\x45\x18\xca\x84\x2b\xf8\x33\x37\x0e\xd9\xd6\x01\x26\x2c\x73\xdc\x42\xe6\xac\xd1\x5b\xff\xce\xd9\xc6\xf2\x70\x87\x0e\x42\x13\x21\x73\x32\xdc\x41\x6a\x91\x49\x1d\xa1\x76\x20\x6c\x49\x36\xbb\x58\xce\x16\x0d\x44\xf8\x7b\x06\xa0\xa4\x46\x26\x50\x6e\x85\x0b\xe0\x6a\x71\xfb\x6a\x06\x10\x1b\xed\x58\xcc\x13\xa9\x1e\x02\x48\x8c\x36\x59\xca\x43\xbc\x6c\x5e\x5f\xcd\x3e\xcf\x3a\x9c\x52\x8b\x97\x9d\x81\x02\x46\x77\x64\xb7\x89\xba\x03\x19\x4f\xd2\x12\x42\x67\x3b\xa9\x05\x5a\xe9\x06\x3b\x88\xab\x86\x36\x93\x9f\xb0\x45\x59\x8d\xee\x2b\x21\x5a\xe3\x09\xb7\x5b\xa9\x99\x33\x69\x00\xeb\xc5\xfa\x16\x93\xd6\xe8\xc6\x38\x67\x92\x52\xe8\x62\xbc\xbf\xdf\xfa\x99\xf7\xbb\xee\x6a\x47\xdc\xf4\xbe\x6f\x7b\xdf\x2f\x9f\x88\xaf\x82\x71\x2c\xbc\xab\x20\xd8\x60\x6c\x2c\x96\xdb\x86\x46\x3b\xd4\x2e\x80\xf9\xcf\x30\x27\x74\x37\x46\x4c\x52\x5f\x8f\x52\x93\xe4\x37\xe3\xe4\x24\xfd\xed\x04\x3d\xb9\xe0\xe5\xd4\x02\x62\xc5\x42\x5c\xb1\x5c\x47\x68\x8b\xb3\x04\xe2\xea\xb2\x3b\xb9\x6e\x4f\x7a\xaf\x8a\x64\x96\x2a\xfe\x10\x80\xe3\x1b\x85\x85\x11\xcc\x3d\xda\x58\x99\x7d\x00\x42\x46\x11\xea\x62\x2c\x35\x99\x74\xd2\xe8\x00\x2c\x2a\xee\xe4\x7d\x49\x99\xf2\x28\x92\x7a\x3b\x6d\xaf\x3e\xa4\x5a\xa2\x49\x68\xb4\xd8\xda\xe8\xc1\x79\x1f\xb2\xe7\xb1\x43\x7b\x80\x7b\x49\x53\x32\x6f\x24\xe3\x9b\xcc\xa8\xdc\x95\x92\xd5\x12\xad\x8a\x0f\x85\xb1\xab\x5e\x5b\xd1\xc9\x7b\xec\x5e\x46\x4e\x04\x70\xb5\x5a\xfd\x32\xa6\xbb\xbd\xb1\x11\xdb\x58\xe4\xbb\x00\xca\x7f\x8c\x2b\x55\x4c\x84\xb9\xcd\x8c\x0d\x20\xf2\xe1\xf7\x48\xc9\x7a\x9e\xf0\xfa\x3b\xfd\x08\xd7\x1b\x57\x72\x03\x97\x7d\xa7\xdf\xf0\x6c\xf9\x80\xff\xf8\x30\x14\xcb\x6d\x5e\x39\xa8\xa7\xaf\x08\x61\xd5\x5a\x20\xbc\xfc\x03\xb7\xe9\x5f\x75\xed\x7d\x07\x7c\x0a\x77\xb4\x11\xda\xfa\x00\x14\xfa\x54\x85\xe3\x8c\x5c\x50\x0b\x61\x59\x88\xba\x50\x7e\xb5\xbf\xc3\xbf\x1c\xe3\x4a\x6e\x75\x00\x7e\x66\x18\x6a\xec\x48\xa8\xb9\x80\xf2\x8f\xb0\xb7\xad\x53\x83\xd1\xb5\xa3\xca\xcf\x15\xa5\xb8\x50\x54\x6f\x37\xa1\x68\xc5\x97\xf2\xec\xf5\x18\x28\xd9\xe5\xe1\x2d\xb8\x22\xac\x37\x58\xbb\xc8\x15\x4b\x55\x9e\xd5\x0c\x94\xcc\x1c\x2b\x73\xa1\x91\x08\xd3\xa2\xbf\x03\x25\x3b\xb2\xc6\xca\x70\x17\x94\x21\xa2\x1d\x0e\x3c\xfe\x0a\x89\x8f\x1f\xec\xa6\x33\x68\x2b\xdb\xfb\xc1\x46\x65\x2f\x86\x8a\xce\x95\xcf\xac\x4e\xc0\x5b\xd3\xff\xf7\x78\x87\x8e\x71\x2c\xce\xe7\xc1\x47\x38\x9f\xf9\x06\xce\x67\x1e\xe9\x7c\xf5\xc2\xa1\x72\x0a\xd0\x79\x71\x34\x7d\x06\x1e\x80\x4d\x22\x66\x14\xc5\xa0\xd0\x5a\x75\xd2\xfc\x0a\xa9\x43\x8b\x49\x29\xf0\xf4\xaa\x29\x5d\x1f\xaf\xdd\x44\x6a\x56\x59\x66\xdd\xd3\x77\x85\xe8\xcc\xc3\x38\x87\xf9\x62\xe8\xcf\x46\xb1\x4f\x68\xcd\xb8\x2a\xc6\xe9\x9f\x45\x86\xf9\x8a\x06\xcd\x55\x2a\xf8\x93\x0d\xd8\xe1\x74\xba\x25\x07\xcb\x9f\xd9\xa4\x97\xa0\xcc\x1e\xad\xc7\x40\xda\x17\xf8\xc8\x6d\xf0\x8e\x24\xa5\xb2\x84\x0f\x43\xfd\x73\x96\x09\xb3\xcf\xad\x02\xfe\x4e\x58\x8c\x3f\x1c\xbd\x09\xb5\x94\xdc\xf4\x6c\x0e\xdc\x39\x7b\x56\xd0\x9c\xc3\xfc\x7c\x3e\x91\xbd\xf5\xe4\xc0\xa4\x57\x50\x96\x05\x71\xab\x2c\xaa\x1d\xc5\x26\x5c\x0d\xca\xa2\x7a\x78\xc0\x94\xcc\x95\xcb\x71\x4a\x00\xe2\x8e\xc6\xc4\xe7\x64\x59\x58\x68\x6a\x84\x21\x41\x45\xb1\xff\x63\x68\x3e\x2f\x26\x8d\xb2\x9e\x23\x91\x12\x50\xab\x1e\x42\x0b\xc8\x04\xf7\x09\x6a\x12\x3a\x81\x3d\x34\x11\xd2\xc8\xfd\x0c\xc5\xe7\x23\x91\x46\x5a\x9c\x60\xd5\xcc\x36\xec\xbe\x56\x5c\xe4\xa5\x98\x76\x72\xca\xa3\x12\x53\x28\x6a\xb7\xaa\xf2\xbe\x39\xc4\xd0\xc7\x02\x32\x14\xac\x8a\xc1\x9e\x55\x52\xdb\xb4\x70\x68\x4b\x74\x29\x88\xe2\xcb\x13\xa8\x08\x0f\xf1\xf8\x4a\x32\xc5\x84\xc5\xb9\x52\x47\x70\x6a\xd1\x11\xaa\xdf\x28\x13\xee\x88\xfa\x6d\x90\x92\x1f\xaa\xd1\x1e\xa5\x9f\xbe\x57\x7d\xfc\x38\x1f\x2f\xb2\x7d\x6e\x51\x75\x70\xc8\xdd\x4f\x56\x6d\x6f\xff\x2f\x5f\xbe\xcc\x4f\x2c\x5e\xc7\x70\x3c\xc9\x3a\x1d\x44\xdf\xe5\xf7\x34\x35\x78\xaf\x2a\x9b\xa3\x44\x82\xb9\xfe\x9a\x60\xae\x0f\x26\x98\x3d\x46\x94\x63\x8c\xae\xe8\xdc\x8b\x74\x77\xa3\x49\x57\xab\xcc\xa0\x42\xd4\xe9\x7a\x74\x53\x6f\x52\x29\x42\x3a\x64\x65\x17\x36\x28\x6c\xd9\x4d\xa2\xee\xde\xf3\x1f\xcf\x8f\xe7\x9b\x3f\xf3\x63\xc2\x72\x84\x8a\x6d\xe3\x04\x22\x54\x4d\x03\x24\xc2\xd0\x58\xee\x8f\x03\x59\x68\xb4\x56\xd1\xf1\xab\x43\x40\x07\xae\x61\x62\x53\x36\x56\x59\xf1\x89\xd6\x77\x59\x4f\xbf\xe0\x7d\x03\x88\x85\x46\x29\x9e\x66\x58\x24\xe5\xfe\xed\xc0\x6e\x16\xee\xe0\xc2\x6f\xd7\x24\xf8\xd7\x55\xfc\x99\xea\xe9\x56\x41\xa0\xdd\x38\x6a\x35\xef\xef\xd1\x3a\x19\x72\x55\x4f\x39\x93\x8e\x26\xb5\xfd\xee\xd5\x11\x78\x5f\x54\x98\xeb\xfe\xb2\x8f\x52\xd7\x44\x7a\xd2\x5b\x1d\xc4\xd2\x66\x8e\x85\x42\xaa\x08\xee\xc0\x89\x40\x1b\x77\xf6\x2e\x0b\x4d\x8a\xaf\xe7\xd6\xec\xe7\x1f\xce\x3b\x9c\xa7\x3b\xd7\x8f\xe0\xfe\x7f\xe8\x7a\xf6\x92\x89\x63\xfa\xda\x75\x06\x78\x72\x0f\xbb\x97\x30\x9d\xa4\xc0\xc2\xd0\x07\x95\x78\xb4\xed\x6b\xcf\x19\xa9\x0b\xff\x79\xcf\x27\x9e\x09\x95\x51\xea\xf0\xa0\xaa\xab\xb1\xb9\x4d\xbb\xf7\xe7\xe0\x76\xfc\x3c\xfb\x37\x00\x00\xff\xff\x5c\xd0\x15\x41\xc7\x1d\x00\x00")

func assetsRemarkdownCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsRemarkdownCss,
		"assets/remarkdown.css",
	)
}

func assetsRemarkdownCss() (*asset, error) {
	bytes, err := assetsRemarkdownCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/remarkdown.css", size: 7623, mode: os.FileMode(420), modTime: time.Unix(1520137441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/remarkdown.css": assetsRemarkdownCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"remarkdown.css": &bintree{assetsRemarkdownCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

